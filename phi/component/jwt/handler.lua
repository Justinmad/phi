---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/4/18 17:25
---

--[[
    {
      "hostkey": "www.sample.com",
      "mapper": {
        "header":"X-JWT-TOKEN"
      },
      "secret": "~!+_qwd23KASXZLPQWE,3%())<>,.!",
      "alg": "HS256",
      "include": ["/asd/*"],
      "exclude": []
    }
]]
local base_component = require "component.base_component"
local get_host = require("utils").getHost
local cjson = require "cjson.safe"
local ngx_now = ngx.now
local response = require "core.response"
local jwt = require "resty.jwt"
local validators = require "resty.jwt-validators"

local alg_enum = {
    HS256 = "HS256",
    HS512 = "HS512",
    RS256 = "RS256",
    RS512 = "RS512"
}

local ERR = ngx.ERR
local NOTICE = ngx.NOTICE
local LOGGER = ngx.log

local jwt_auth = base_component:extend()

jwt_auth._version = "0.0.1"

function jwt_auth:new(ref, config)
    self.super.new(self, "jwt-auth")
    self.order = config.order
    self.redis = ref
    return self
end

local function createValidator()

end

-- jwt sign for dev
function jwt_auth:sign(hostkey, alg, secret, sub)
    return jwt:sign(
            secret,
            {
                header = { typ = "JWT", alg = alg_enum[alg] },
                payload = { sub = sub, exp = ngx_now(), aud = "phi", iss = "phi" }
            }
    )
end

-- jwt认证
function jwt_auth:rewrite(ctx)
    self.super.rewrite(self)
    local hostkey = get_host(ctx)
    local jwt_token = ngx.req.get_uri_args()["jwt_token"]
    local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token, {
        exp = validators.is_not_expired(),
    })
    ngx.say(cjson.encode(jwt_obj))
end

return jwt_auth