;配置文件
[routerService]
path = service.router_service_with_mlcache
router_lrucache_size = 2e3
constructor_refs = routerDao
[upstreamService]
path = service.upstream_service_with_mlcache
upstream_lrucache_size = 2e3
constructor_refs = upstreamDao
[rateLimitingService]
path = service.rate_limiting_service_with_mlcache
limiter_lrucache_size = 2e3
constructor_refs = rateLimitingDao
[degradationService]
path = service.degradation_service_with_mlcache
limiter_lrucache_size = 2e3
constructor_refs = degradationDao
[routerDao]
path = dao.router_dao_by_redis
constructor_refs = dataSource
[upstreamDao]
path = dao.upstream_dao_by_redis
constructor_refs = dataSource
[rateLimitingDao]
path = dao.rate_limiting_policy_dao
constructor_refs = dataSource
[degradationDao]
path = dao.degradation_dao
constructor_refs = dataSource
[routerController]
type = controller
path = admin.controller.router_controller
autowire = routerService
[upstreamController]
type = controller
path = admin.controller.upstream_controller
autowire = upstreamService
[degradeController]
type = controller
path = admin.controller.degrade_controller
autowire = degradationService
[rateLimitingController]
type = controller
path = admin.controller.rate_limiting_controller
autowire = rateLimitingService
[dashboardController]
type = controller
path = admin.controller.dashboard_controller
autowire = routerService,upstreamService
[dataSource]
path = tools.redis
redis_host = ${redis_host:127.0.0.1}
redis_port = ${redis_port:6379}
redis_db_index = ${redis_db_index}
redis_pool_size = ${redis_pool_size}
redis_keepalive = ${redis_keepalive}
[router]
path = core.router
constructor_refs = routerService
[balancer]
path = core.balancer
constructor_refs = upstreamService
balancer_upstream_name = phi_upstream
[rateLimiter]
type = component
path = component.limit_traffic.rate_limiting_handler
constructor_refs = rateLimitingService
order = 2
[serviceDegradation]
type = component
path = component.limit_traffic.degradation_handler
constructor_refs = degradationService
order = 1
