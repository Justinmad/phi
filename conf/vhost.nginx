upstream upstream9999 {
    server 127.0.0.1:9999;
    keepalive 20;
}
upstream upstream8888 {
    server 127.0.0.1:8888;
    keepalive 200;
}
upstream upstream7777_6666_5555 {
    server 127.0.0.1:7777;
    server 127.0.0.1:8888;
    server 127.0.0.1:6666 backup;
    keepalive 20;
}

upstream upstream12346 {
    server 127.0.0.1:12346;
    keepalive 20;
}

server {
    listen 3333;
    location / {
        proxy_pass http://upstream12346;
    }
}

server {
    listen 9999;
    server_name localhost;
    location / {
        root E:\home\logs;
    }
}

server {
    listen 12346;
    server_name localhost;
    location / {
        # root /home/young;
        root E:/home/logs;
    }
}


server {
    listen 8888;

    location  / {
        content_by_lua_block{
--            local utils = require "kong.utils";
--            local cjson = require "cjson.safe";
--            local printable = require "kong.printable";
--
--            local uuidstr = utils.uuid();
--             local var = ngx.var
--             local str=""
--do
--        -- Nginx's behavior when proxying a request with an empty querystring
--        -- `/foo?` is to keep `$is_args` an empty string, hence effectively
--        -- stripping the empty querystring.
--        -- We overcome this behavior with our own logic, to preserve user
--        -- desired semantics.
--
--        if var.is_args == "?" or string.sub(var.request_uri, -1) == "?" then
--          str = str .. "?" .. (var.args or "")
--        end
--      end
--            ngx.say(ngx.var.binary_remote_addr,"  this is the fake backend peer... listen port 8888"  .. "-------" .. uuidstr .. ".............." , ngx.var.connections_active);
            ngx.say("this is the fake backend peer... listen port 8888 ........... ",ngx.var.connections_active);
        }
    }
}

server {
    listen 7777;

    location  / {
        content_by_lua_block{
            ngx.say("this is the fake backend peer... listen port 7777");
    }
    }
}

server {
    listen 6666;

    location / {
        content_by_lua_block{
            ngx.say("this is the fake backend peer... listen port 6666")
    }
    }
}

server {
    listen 5555;

    location  / {
        content_by_lua_block{
--        .. string.find(ngx.req.get_headers()["Content-Type"], "json")
            ngx.say("this is the fake backend peer... listen port 5555");
    }
    }
}