#user  yangyang.zhang;
worker_processes 1;
error_log /home/young/IdeaProjects/phi/logs/error.log error;
worker_cpu_affinity auto;
worker_rlimit_core 400m;
working_directory /home/young/IdeaProjects/phi/conf/;

events {
    worker_connections 10240;
}

http{
    access_log off;
    send_timeout 60s;
    keepalive_timeout 75s;
    keepalive_requests 1000;
    client_body_timeout 60s;
    client_header_timeout 60s;
    charset UTF-8;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    lua_package_path '/home/young/IdeaProjects/phi/openresty/?.lua;/home/young/IdeaProjects/phi/phi/?.lua;/home/young/IdeaProjects/phi/lib/?.lua;;';
    lua_package_cpath '/home/young/IdeaProjects/phi/lib/?.so;;';
    lua_code_cache on;

    lua_shared_dict phi                 5m;
    lua_shared_dict phi_events          1m;
    lua_shared_dict phi_lock            1m;
    lua_shared_dict phi_router          10m;
    lua_shared_dict phi_upstream        10m;
    lua_shared_dict phi_limiter         10m;
    lua_shared_dict phi_degrader        10m;
    lua_shared_dict phi_limit_req       128m;
    lua_shared_dict phi_limit_conn      128m;
    lua_shared_dict phi_limit_count     128m;

    init_by_lua_block {
        PHI = require 'Phi'
        PHI:init();
    }

    init_worker_by_lua_block {
        PHI:init_worker();
    }

    server {
        listen 8080;

        location / {
            set $backend '';

            rewrite_by_lua_block {
                PHI:rewrite()
            }

            access_by_lua_block {
                PHI:access()
            }

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_pass http://$backend;

            log_by_lua_block {
                PHI:log()
            }
        }

    }

    server {
        listen 12345;

        # location /nginx_status {
            # access_log off;
            # stub_status;
        # }

        location / {
            content_by_lua_block {
                PHI.admin:content_by_lua()
            }
            log_by_lua_block {
                PHI:log()
            }
        }

    }

    upstream phi_upstream {
        server 0.0.0.1;   # just an invalid address as a place holder
        balancer_by_lua_block {
            PHI:balancer();
        }
        keepalive 2000;
    }

    include vhost.conf;
}

