#user  yangyang.zhang;
worker_processes 1;
worker_cpu_affinity auto;
error_log logs/error.log debug;

events {
    worker_connections 10240;
    accept_mutex off;
}

http{
    include mime.types;
    access_log off;
    send_timeout 60s;
    keepalive_timeout 75s;
    keepalive_requests 10000;
    client_body_timeout 60s;
    client_header_timeout 60s;
    charset UTF-8;

    lua_package_path '../openresty/?.lua;../phi/?.lua;../lib/?.lua;;';
    lua_code_cache on;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    lua_shared_dict phi                     5m;
    lua_shared_dict phi_events              5m;
    lua_shared_dict phi_lock                5m;
    lua_shared_dict phi_router              10m;
    lua_shared_dict phi_upstream            10m;
    lua_shared_dict phi_limiter             10m;
    lua_shared_dict phi_degrader            10m;
    lua_shared_dict phi_limit_req           128m;
    lua_shared_dict phi_limit_conn          128m;
    lua_shared_dict phi_limit_count         128m;

    lua_shared_dict status  8m;
    lua_shared_dict summary 128m;
    lua_shared_dict recording_summary 128m;

    init_by_lua_file ../entry_lua_file/init_by_lua.lua;
    init_worker_by_lua_file ../entry_lua_file/init_worker_by_lua.lua;

    server {
        listen 80;
        server_name phi_entry;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location / {
            set $backend '';
            set $upstream_connection '';

            rewrite_by_lua_file ../entry_lua_file/rewrite_by_lua.lua;

            proxy_http_version 1.1;
            proxy_set_header Connection $upstream_connection;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            proxy_pass http://$backend;
        }

        log_by_lua_file ../entry_lua_file/log_by_lua.lua;
    }

    server {
        listen       9090;
        access_log off;
        error_log logs/api_error.log info;
        set  $template_root "";

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # 静态文件
        location ~* /static/(.*) {
            alias ../static/$1;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        location = / {
            try_files '' ../static/index.html;
        }

        location / {
            content_by_lua_file ../lib/mio/api/main.lua;
        }
    }

    server {
        listen 12345;
        set  $template_root "";
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # 静态文件
        location ~* /static/(.*) {
            alias ../static/$1;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        location = / {
            try_files '' ../static/admin.html;
        }
        location / {
            default_type application/json;
            content_by_lua_file ../entry_lua_file/admin_content_by_lua.lua;
        }

        location = /verify {
            content_by_lua_block {
                local cjson = require "cjson"
                local jwt = require "resty.jwt"
                local validators = require "resty.jwt-validators"

                local jwt_token = ngx.req.get_uri_args()["jwt_token"]
                local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token,{
                    exp = validators.is_not_expired(),
                })
                ngx.say(cjson.encode(jwt_obj))
            }
        }
        location = /sign {
            content_by_lua_block {
                local cjson = require "cjson"
                local jwt = require "resty.jwt"

                local jwt_token = jwt:sign(
                    "lua-resty-jwt",
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={foo="bar",exp="1523890939",sub="asdasd",aud="phi",iss="phi"}
                    }
                )
                ngx.say(jwt_token)
            }
        }
    }

    upstream phi_upstream {
        server 0.0.0.1;   # just an invalid address as a place holder
        balancer_by_lua_file ../entry_lua_file/balancer_by_lua.lua;
        keepalive 2000;
    }
    include vhost.conf;
}

